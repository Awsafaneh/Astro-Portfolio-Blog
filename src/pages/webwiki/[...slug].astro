---
import { featureFlags } from "@config/featureFlag/featureFlag.json";
import { type CollectionEntry, getCollection } from "astro:content";
import WebWiki from "@layouts/Wiki.astro";
import { calculateReadTime } from "@util/read_time";
export const prerender = true;

export async function getStaticPaths() {
  if (!featureFlags.showWiki) {
    return [];
  }

  const posts = await getCollection("webwiki");

  const filteredPosts = import.meta.env.PROD
    ? posts.filter((post) => !post.data.draft)
    : posts;

  return filteredPosts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

type Props = CollectionEntry<"webwiki">;

const post = Astro.props;

const readTime = calculateReadTime(post.body);

const { Content } = featureFlags.showWiki
  ? await post.render()
  : { Content: null };
---

{
  featureFlags.showWiki && Content ? (
    <WebWiki {...post.data} readTime={readTime}>
      <Content />
    </WebWiki>
  ) : post ? (
    <div class="wiki-error">
      <h1>Error!</h1>
      <p>
        Wiki post data is not available at the moment. Please check back later.
      </p>
      <a href="/">Return to Homepage</a>
    </div>
  ) : (
    <div class="wiki-error">
      <h1>Error!</h1>
      <p>
        Wiki post data is not available at the moment. Please check back later.
      </p>
      <a href="/">Return to Homepage</a>
    </div>
  )
}
